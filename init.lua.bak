vim.cmd("set expandtab")
vim.cmd("set tabstop=4")
vim.cmd("set softtabstop=4")
vim.cmd("set shiftwidth=4")
vim.cmd("set number")
vim.cmd("set relativenumber")

local opts = { noremap = true, silent = true }

local keymap = vim.keymap.set

-- Split window
keymap("n", "ss", ":split<CR><C-w>w", opts)
keymap("n", "sv", ":vsplit<CR><C-w>w", opts)

-- Bootstrap lazy.nvim
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not (vim.uv or vim.loop).fs_stat(lazypath) then
  local lazyrepo = "https://github.com/folke/lazy.nvim.git"
  local out = vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath })
  if vim.v.shell_error ~= 0 then
    vim.api.nvim_echo({
      { "Failed to clone lazy.nvim:\n", "ErrorMsg" },
      { out, "WarningMsg" },
      { "\nPress any key to exit..." },
    }, true, {})
    vim.fn.getchar()
    os.exit(1)
  end
end
vim.opt.rtp:prepend(lazypath)

-- Make sure to setup `mapleader` and `maplocalleader` before
-- loading lazy.nvim so that mappings are correct.
-- This is also a good place to setup other settings (vim.opt)
vim.g.mapleader = " "
vim.g.maplocalleader = "\\"

-- Setup lazy.nvim
require("lazy").setup({
  spec = {
    -- add your plugins here
    {
        'nvim-telescope/telescope.nvim', tag = '0.1.8',
-- or                              , branch = '0.1.x',
        dependencies = { 'nvim-lua/plenary.nvim' }
    },
    { "nvim-treesitter/nvim-treesitter" , build = ":TSUpdate" },
    { "github/copilot.vim" },
    {
        "nvim-neo-tree/neo-tree.nvim",
        branch = "v3.x",
        dependencies = {
            "nvim-lua/plenary.nvim",
            "nvim-tree/nvim-web-devicons", -- not strictly required, but recommended
            "MunifTanjim/nui.nvim",
      -- "3rd/image.nvim", -- Optional image support in preview window: See `# Preview Mode` for more information
            }
    },
    { 'nvim-telescope/telescope-ui-select.nvim' },
    {
        "williamboman/mason.nvim",
        "williamboman/mason-lspconfig.nvim",
        "neovim/nvim-lspconfig",
    },
    {
        'nvim-lualine/lualine.nvim',
        dependencies = { 'nvim-tree/nvim-web-devicons' }
    },
    {
        'hrsh7th/cmp-nvim-lsp',
        'hrsh7th/nvim-cmp'
    },
    {
        "christoomey/vim-tmux-navigator",
        cmd = {
            "TmuxNavigateLeft",
            "TmuxNavigateDown",
            "TmuxNavigateUp",
            "TmuxNavigateRight",
            "TmuxNavigatePrevious",
        },
        keys = {
            { "<c-h>", "<cmd><C-U>TmuxNavigateLeft<cr>" },
            { "<c-j>", "<cmd><C-U>TmuxNavigateDown<cr>" },
            { "<c-k>", "<cmd><C-U>TmuxNavigateUp<cr>" },
            { "<c-l>", "<cmd><C-U>TmuxNavigateRight<cr>" },
            { "<c-\\>", "<cmd><C-U>TmuxNavigatePrevious<cr>" },
        },
    },
    { "catppuccin/nvim", name = "catppuccin", priority = 1000 },
  },
  -- Configure any other settings here. See the documentation for more details.
  -- colorscheme that will be used when installing plugins.
  -- install = { colorscheme = {  } },
  -- automatically check for plugin updates
  checker = { enabled = true },


})

local catppuccin = require("catppuccin")
catppuccin.setup({
    integrations = {
        treesitter = true,
    }
})
vim.cmd('colorscheme catppuccin')

local builtin = require('telescope.builtin')
vim.keymap.set('n', '<leader>ff', builtin.find_files, { desc = 'Telescope find files' })
vim.keymap.set('n', '<leader>fg', builtin.live_grep, { desc = 'Telescope live grep' })
vim.keymap.set('n', '<leader>fb', builtin.buffers, { desc = 'Telescope buffers' })
vim.keymap.set('n', '<leader>fh', builtin.help_tags, { desc = 'Telescope help tags' })

-- This is your opts table
local telescope = require("telescope")
telescope.setup({
  extensions = {
    ["ui-select"] = {
      require("telescope.themes").get_dropdown {
        -- even more opts
      }

      -- pseudo code / specification for writing custom displays, like the one
      -- for "codeactions"
      -- specific_opts = {
      --   [kind] = {
      --     make_indexed = function(items) -> indexed_items, width,
      --     make_displayer = function(widths) -> displayer
      --     make_display = function(displayer) -> function(e)
      --     make_ordinal = function(e) -> string
      --   },
      --   -- for example to disable the custom builtin "codeactions" display
      --      do the following
      --   codeactions = false,
      -- }
    }
  }
})
-- To get ui-select loaded and working with telescope, you need to call
-- load_extension, somewhere after setup function:
telescope.load_extension("ui-select")

vim.keymap.set('n', '<C-n>', ':Neotree filesystem reveal left<CR>', {})

local treesitter = require('nvim-treesitter.configs')
treesitter.setup({
    auto_install = true,
    highlight = { enable = true },
    indent = { enable = true }
})

local lualine = require('lualine')
lualine.setup({
    options = { theme = "dracula" }
})

local mason = require("mason")
mason.setup({})
local mason_lspconfig = require("mason-lspconfig")
mason_lspconfig.setup({
    ensure_installed = {"rust_analyzer", "lua_ls", "bashls", "clangd", "cssls", "dockerls", "html", "jdtls", "ts_ls", "vimls", "ast_grep", "phpactor", "prismals", "jsonls" },
})

local lspconfig = require('lspconfig')

local cmp = require("cmp")
cmp.setup({
    window = {
        completion = cmp.config.window.bordered(),
        documentation = cmp.config.window.bordered()
    },
    mapping = cmp.mapping.preset.insert({
      ['<C-b>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.abort(),
      ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    }),
sources = cmp.config.sources({
      { name = 'nvim_lsp' },
      -- { name = 'vsnip' }, -- For vsnip users.
      -- { name = 'luasnip' }, -- For luasnip users.
      -- { name = 'ultisnips' }, -- For ultisnips users.
      -- { name = 'snippy' }, -- For snippy users.
    }, {
      { name = 'buffer' },
    })
})

local capabilities = require('cmp_nvim_lsp').default_capabilities()

lspconfig.rust_analyzer.setup({
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, {}),
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, {}),
    vim.keymap.set('n', '<leader>ca', vim.lsp.buf.code_action, {}),
    capabilities = capabilities,
})

lspconfig.lua_ls.setup({
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, {}),
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, {}),
    vim.keymap.set('n', '<leader>ca', vim.lsp.buf.code_action, {}),
    capabilities = capabilities,
})
lspconfig.bashls.setup({
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, {}),
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, {}),
    vim.keymap.set('n', '<leader>ca', vim.lsp.buf.code_action, {}),
    capabilities = capabilities,
})
lspconfig.clangd.setup({
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, {}),
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, {}),
    vim.keymap.set('n', '<leader>ca', vim.lsp.buf.code_action, {}),
    capabilities = capabilities,
})
lspconfig.cssls.setup({
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, {}),
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, {}),
    vim.keymap.set('n', '<leader>ca', vim.lsp.buf.code_action, {}),
    capabilities = capabilities,
})
lspconfig.dockerls.setup({
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, {}),
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, {}),
    vim.keymap.set('n', '<leader>ca', vim.lsp.buf.code_action, {}),
    capabilities = capabilities,
})
lspconfig.html.setup({
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, {}),
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, {}),
    vim.keymap.set('n', '<leader>ca', vim.lsp.buf.code_action, {}),
    capabilities = capabilities,
})
lspconfig.jdtls.setup({
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, {}),
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, {}),
    vim.keymap.set('n', '<leader>ca', vim.lsp.buf.code_action, {}),
    capabilities = capabilities,
})
lspconfig.ts_ls.setup({
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, {}),
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, {}),
    vim.keymap.set('n', '<leader>ca', vim.lsp.buf.code_action, {}),
    capabilities = capabilities,
})
lspconfig.vimls.setup({
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, {}),
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, {}),
    vim.keymap.set('n', '<leader>ca', vim.lsp.buf.code_action, {}),
    capabilities = capabilities,
})
lspconfig.ast_grep.setup({
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, {}),
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, {}),
    vim.keymap.set('n', '<leader>ca', vim.lsp.buf.code_action, {}),
    capabilities = capabilities,
})
lspconfig.phpactor.setup({
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, {}),
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, {}),
    vim.keymap.set('n', '<leader>ca', vim.lsp.buf.code_action, {}),
    capabilities = capabilities,
})
lspconfig.prismals.setup({
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, {}),
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, {}),
    vim.keymap.set('n', '<leader>ca', vim.lsp.buf.code_action, {}),
    capabilities = capabilities,
})
lspconfig.jsonls.setup({
    vim.keymap.set('n', 'K', vim.lsp.buf.hover, {}),
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, {}),
    vim.keymap.set('n', '<leader>ca', vim.lsp.buf.code_action, {}),
    capabilities = capabilities,
})

vim.cmd [[
  highlight Normal guibg=none
  highlight NonText guibg=none
  highlight Normal ctermbg=none
  highlight NonText ctermbg=none
]]
